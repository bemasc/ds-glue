{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2021-09-30T00:40:07.221765+00:00",
  "repo": "bemasc/ds-glue",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "MDU6SXNzdWU5NjMyNjMxNTM=",
      "title": "Adding and replacing in delegation responses",
      "url": "https://github.com/bemasc/ds-glue/issues/2",
      "state": "CLOSED",
      "author": "paulehoffman",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 3.2 says: `The resolver SHALL add each of these reconstructed RRSets to the delegation responses, replacing any RRSet with the same owner name and type.` It feels wrong to say that the resolver changes the delegation response: the response is just a response. For example, a resolver that is logging responses should not alter what it logs based on the reconstructed RRSets. \r\n\r\nShould this instead talk about filling the resolver's cache? Does it add to the cache, and replace cached entries, from the reconstructed RRsets? Getting the DS data is a step before the resolver looks in its cache to determine what to do for its next step (possibly using secure transport for the following query).",
      "createdAt": "2021-08-07T16:38:46Z",
      "updatedAt": "2021-08-09T15:49:29Z",
      "closedAt": "2021-08-09T15:49:29Z",
      "comments": [
        {
          "author": "bemasc",
          "authorAssociation": "OWNER",
          "body": "My impression is that resolvers are under no obligation to cache anything, especially glue records, so I'd like to avoid using that framing.  I've added more detail to the description in #3; please review.",
          "createdAt": "2021-08-09T15:26:55Z",
          "updatedAt": "2021-08-09T15:26:55Z"
        },
        {
          "author": "paulehoffman",
          "authorAssociation": "NONE",
          "body": "Agree that #3 addresses this, so am closing.",
          "createdAt": "2021-08-09T15:49:29Z",
          "updatedAt": "2021-08-09T15:49:29Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA1Njg3NDE4",
      "title": "Fix NSEC examples",
      "url": "https://github.com/bemasc/ds-glue/pull/1",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Reported by Ilari Liusvaara",
      "createdAt": "2021-08-06T19:02:19Z",
      "updatedAt": "2021-08-10T16:57:05Z",
      "baseRepository": "bemasc/ds-glue",
      "baseRefName": "main",
      "baseRefOid": "178e0f2fe8f1b51fe61f4ee19a16506f1144b6dc",
      "headRepository": "bemasc/ds-glue",
      "headRefName": "fix-nsec-examples",
      "headRefOid": "cbf54ee10dadd5600289ee72bad8cd1b2b017879",
      "closedAt": "2021-08-10T16:56:48Z",
      "mergedAt": "2021-08-10T16:56:48Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "83f227996d3c3980e645fd90cf055b5d6c097185"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA2NTg2MDE0",
      "title": "Clarify interpretation of DSGLUE by resolvers",
      "url": "https://github.com/bemasc/ds-glue/pull/3",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #2",
      "createdAt": "2021-08-09T14:45:08Z",
      "updatedAt": "2021-08-09T16:26:35Z",
      "baseRepository": "bemasc/ds-glue",
      "baseRefName": "main",
      "baseRefOid": "178e0f2fe8f1b51fe61f4ee19a16506f1144b6dc",
      "headRepository": "bemasc/ds-glue",
      "headRefName": "adjusted-response",
      "headRefOid": "232a70574cca2f454b5efb2e4dd6d961f9fd1669",
      "closedAt": "2021-08-09T16:04:47Z",
      "mergedAt": "2021-08-09T16:04:47Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "ef0808483e2ee58c9784440e6d82832d90643cce"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 4,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE0NTUxNDQ1",
      "title": "Remove use of NSEC and restructure around RRSets",
      "url": "https://github.com/bemasc/ds-glue/pull/4",
      "state": "MERGED",
      "author": "bemasc",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I've been unable to get the NSEC logic correct here, and feedback\r\nsuggests that it is likely to be more difficult to implement than\r\nanticipated.  This version provides a more limited form of authenticated\r\nnonexistence using empty RRSets, which required moving to an\r\nRRSet-oriented format.",
      "createdAt": "2021-08-17T20:40:14Z",
      "updatedAt": "2021-08-19T16:00:15Z",
      "baseRepository": "bemasc/ds-glue",
      "baseRefName": "main",
      "baseRefOid": "83f227996d3c3980e645fd90cf055b5d6c097185",
      "headRepository": "bemasc/ds-glue",
      "headRefName": "no-nsec",
      "headRefOid": "57584c03a45c1d397921b7cff494dcd5d85fe5dd",
      "closedAt": "2021-08-19T16:00:11Z",
      "mergedAt": "2021-08-19T16:00:11Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "fea97f7518189f99b6de7074327d1331ff3dbf8f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzMzNDIxNzIz",
          "commit": {
            "abbreviatedOid": "96a3525"
          },
          "author": "puneetsood",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Mostly LGTM - matches my understanding of our discussion.\r\n",
          "createdAt": "2021-08-18T23:05:42Z",
          "updatedAt": "2021-08-18T23:27:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Either in this sentence (or the next sentence) clarify if all child zone RRs to be encoded end up in a single DSGLUE RR or multiple DSGLUE RRs.\r\n\r\nReading line 59 below, it seems like each child zone RR ends up in its own DSGLUE RR.",
              "createdAt": "2021-08-18T23:05:42Z",
              "updatedAt": "2021-08-18T23:27:56Z"
            },
            {
              "originalPosition": 177,
              "body": "How does this matter? If the resolver is processing the DSGLUE records, will it not automatically ignore the unprotected A/AAAA records in the ADDL section in the response? ",
              "createdAt": "2021-08-18T23:13:53Z",
              "updatedAt": "2021-08-18T23:27:56Z"
            },
            {
              "originalPosition": 114,
              "body": "Explicitly list the RR types which should be supported (not always included): NS, A, AAAA.\r\nProbably better to point to the new IANA registry described towards the end of the document.\r\n",
              "createdAt": "2021-08-18T23:15:11Z",
              "updatedAt": "2021-08-18T23:27:56Z"
            },
            {
              "originalPosition": 180,
              "body": "If we are getting trusted glue in the delegation response, what is the incentive to re-resolve the in-bailiwick NS names? Any secure resolution of the NS name could only happen over the DoT channel established after processing the DSGLUE RRs.\r\n\r\n",
              "createdAt": "2021-08-18T23:17:01Z",
              "updatedAt": "2021-08-18T23:27:56Z"
            },
            {
              "originalPosition": 214,
              "body": "I would prefer to not allow adding TLSA RRs to the DSGLUE (other than the presence/absence bit).",
              "createdAt": "2021-08-18T23:25:52Z",
              "updatedAt": "2021-08-18T23:27:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MDg0OTkz",
          "commit": {
            "abbreviatedOid": "96a3525"
          },
          "author": "bemasc",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Thanks Puneet!  One question for you at the bottom.",
          "createdAt": "2021-08-19T14:46:57Z",
          "updatedAt": "2021-08-19T15:05:31Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Each child zone RRSet maps to one DSGLUE RR.  Clarified.",
              "createdAt": "2021-08-19T14:46:57Z",
              "updatedAt": "2021-08-19T15:05:31Z"
            },
            {
              "originalPosition": 114,
              "body": "Done",
              "createdAt": "2021-08-19T14:47:05Z",
              "updatedAt": "2021-08-19T15:05:31Z"
            },
            {
              "originalPosition": 177,
              "body": "Correct.  Each DSGLUE record unpacks into an RRSet, which overrides any exactly colliding glue RRSet.  Non-colliding glue remains unchanged.",
              "createdAt": "2021-08-19T14:48:22Z",
              "updatedAt": "2021-08-19T15:05:31Z"
            },
            {
              "originalPosition": 180,
              "body": "Abstractly, the DSGLUE contents are glue, not authoritative zone data.\r\n\r\nConcretely, the DSGLUE doesn't include RRSIGs, so DNSSEC validation would require re-resolving the records.  (There's no guarantee that the child and parent are in sync, so DNSSEC validation might fail if you try to use child RRSIGs with the DSGLUE output.)",
              "createdAt": "2021-08-19T14:50:53Z",
              "updatedAt": "2021-08-19T15:05:31Z"
            },
            {
              "originalPosition": 214,
              "body": "Interesting.  Why do you think it should be disallowed?  The text doesn't recommend  it, but it seems harmless (and a valuable optimization) for zones that are willing to deal with the maintenance overhead (which is really quite minimal when using CDS).\r\n\r\nRecipients (i.e. resolvers) are free to ignore nonempty TLSA DSGLUE.  If it helps, we could note that in the text.",
              "createdAt": "2021-08-19T15:04:50Z",
              "updatedAt": "2021-08-19T15:05:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MTYwOTA2",
          "commit": {
            "abbreviatedOid": "fd2c195"
          },
          "author": "puneetsood",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-19T15:29:02Z",
          "updatedAt": "2021-08-19T15:29:02Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "> Interesting. Why do you think it should be disallowed? The text doesn't recommend it, but it seems harmless (and a valuable optimization) for zones that are willing to deal with the maintenance overhead (which is really quite minimal when using CDS).\r\n> \r\n> Recipients (i.e. resolvers) are free to ignore nonempty TLSA DSGLUE. If it helps, we could note that in the text.\r\n\r\nOn the principle that adding features is easier than removing features. It is not clear yet that TLSA is essential and can be kept up to date by child zone operators. Should be added if there is consensus on the need for it.\r\n",
              "createdAt": "2021-08-19T15:29:02Z",
              "updatedAt": "2021-08-19T15:29:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0MTk1MjA0",
          "commit": {
            "abbreviatedOid": "57584c0"
          },
          "author": "bemasc",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-19T15:59:55Z",
          "updatedAt": "2021-08-19T15:59:55Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "I've added a note here discussing the open question about what to recommend:\r\n\r\n> QUESTION: Should we recommend for or against including nonempty TLSA in DSGLUE?  If CDS-like update mechanisms work well, and ADoT-DANE is widely deployed, this could warrant a positive recommendation.  Conversely, if rotation is error-prone, and ADoT-DANE is rare, a negative recommendation might be better.\r\n\r\nI actually think \"removing\" this option (i.e. deprecating it and ignoring any TLSA DSGLUE) would likely be easier than adding it in the future, due to the potential for systems rejecting unexpected new RR types.\r\n\r\nGiven the wide range of opinions about DANE generally, I don't expect we'll ever see a clear consensus about what is needed, but hopefully we can get more input from the working group.",
              "createdAt": "2021-08-19T15:59:55Z",
              "updatedAt": "2021-08-19T15:59:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 5,
      "id": "MDExOlB1bGxSZXF1ZXN0NzIwMDk2NDg3",
      "title": "Small editorial changes, plus a technical correction to an example",
      "url": "https://github.com/bemasc/ds-glue/pull/5",
      "state": "MERGED",
      "author": "paulehoffman",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-26T00:52:30Z",
      "updatedAt": "2021-09-29T19:02:16Z",
      "baseRepository": "bemasc/ds-glue",
      "baseRefName": "main",
      "baseRefOid": "9875332170a0feba463a471f2c91e2cb162f2380",
      "headRepository": "paulehoffman/ds-glue",
      "headRefName": "peh-editorial",
      "headRefOid": "195d8c469e8325a1fbcfd157d31ad3f6f3418df4",
      "closedAt": "2021-09-29T19:02:16Z",
      "mergedAt": "2021-09-29T19:02:16Z",
      "mergedBy": "bemasc",
      "mergeCommit": {
        "oid": "23f6c2d3dd76cc50af2aca25cd791f2954075881"
      },
      "comments": [
        {
          "author": "paulehoffman",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with your suggested clarification, but suspect it will get more wordsmithing as the WG proceeds.",
          "createdAt": "2021-09-29T18:56:22Z",
          "updatedAt": "2021-09-29T18:56:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOF2UfRs4tt9l8",
          "commit": {
            "abbreviatedOid": "7b43f22"
          },
          "author": "bemasc",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Thanks for the improvements.  One small point of discussion.",
          "createdAt": "2021-09-29T17:59:58Z",
          "updatedAt": "2021-09-29T18:07:20Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "My goal here was to convey the idea that it is the child zone's responsibility to restrict the RR types, not the parent's.  If the parent zone imposes this restriction, we get ossification.  However, I take your point that the child zone is not directly \"publishing\" the DSGLUE records, as the present text suggests.\r\n\r\nPerhaps a more explicit phrasing would be preferable:\r\n```suggestion\r\nDSGLUE records are capable of containing any record type, and parent zones SHOULD support publication of child zones' DSGLUE records regardless of the record types they contain.  However, the meaning of certain record types (e.g. NSEC) is not yet clear in the DSGLUE context.  To avoid ambiguity, published DSGLUE records MUST contain only RR types that have been registered for use with DSGLUE ({{iana}}), and recipients MUST ignore DSGLUE records indicating unexpected record types.\r\n```",
              "createdAt": "2021-09-29T17:59:58Z",
              "updatedAt": "2021-09-29T18:07:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOF2UfRs4tuLlt",
          "commit": {
            "abbreviatedOid": "195d8c4"
          },
          "author": "bemasc",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-29T19:02:10Z",
          "updatedAt": "2021-09-29T19:02:10Z",
          "comments": []
        }
      ]
    }
  ]
}